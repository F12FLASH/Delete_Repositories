import requests
import time
from getpass import getpass

def delete_github_repos():
    username = input("Nh·∫≠p username GitHub c·ªßa b·∫°n: ")
    token = getpass("Nh·∫≠p GitHub Personal Access Token (c√≥ quy·ªÅn repo ho·∫∑c admin:org): ")
    
    headers = {
        "Authorization": f"token {token}",
        "Accept": "application/vnd.github.v3+json"
    }
    
    print("\nüîç ƒêang l·∫•y danh s√°ch repositories...")
    try:
        repos = []
        page = 1
        while True:
            repos_url = f"https://api.github.com/user/repos?type=all&per_page=100&page={page}"
            response = requests.get(repos_url, headers=headers)
            response.raise_for_status()
            new_repos = response.json()
            if not new_repos:
                break
            repos.extend(new_repos)
            page += 1
        
        if not repos:
            print("‚ùå Kh√¥ng t√¨m th·∫•y repository n√†o.")
            return
            
        print("\nüìã Danh s√°ch repositories:")
        for i, repo in enumerate(repos, 1):
            print(f"{i}. {repo['full_name']} (Owner: {repo['owner']['type']})")
            
        to_delete = input("\n‚å®Ô∏è Nh·∫≠p s·ªë th·ª© t·ª± ho·∫∑c t√™n repositories mu·ªën x√≥a (c√°ch nhau b·∫±ng d·∫•u ph·∫©y, ho·∫∑c 'all'): ")
        
        delete_list = []
        if to_delete.lower() == 'all':
            delete_list = repos
            print(f"\n‚ö†Ô∏è B·∫°n ƒë√£ ch·ªçn x√≥a T·∫§T C·∫¢ {len(delete_list)} repositories!")
        else:
            selections = to_delete.split(',')
            for sel in selections:
                sel = sel.strip()
                if sel.isdigit():
                    index = int(sel) - 1
                    if 0 <= index < len(repos):
                        delete_list.append(repos[index])
                else:
                    found = [r for r in repos if sel.lower() in r['full_name'].lower()]
                    if found:
                        delete_list.extend(found)
            
            if not delete_list:
                print("‚ùå Kh√¥ng c√≥ repository n√†o ƒë∆∞·ª£c ch·ªçn.")
                return
                
            print(f"\n‚ö†Ô∏è B·∫°n ƒë√£ ch·ªçn x√≥a {len(delete_list)} repositories:")
            for repo in delete_list:
                print(f"- {repo['full_name']} (Owner: {repo['owner']['type']})")
        
        confirm = input("\n‚ùì B·∫°n c√≥ CH·∫ÆC CH·∫ÆN mu·ªën x√≥a? (y/n): ")
        if confirm.lower() != 'y':
            print("üö´ H·ªßy thao t√°c.")
            return
            
        print("\nüóëÔ∏è ƒêang x√≥a...")
        success_count = 0
        for repo in delete_list:
            try:
                delete_url = f"https://api.github.com/repos/{repo['full_name']}"
                del_response = requests.delete(delete_url, headers=headers)
                del_response.raise_for_status()
                print(f"‚úÖ ƒê√£ x√≥a: {repo['full_name']}")
                success_count += 1
                time.sleep(1)
            except requests.exceptions.HTTPError as e:
                if e.response.status_code == 403:
                    print(f"‚ùå L·ªói 403: Token kh√¥ng c√≥ quy·ªÅn x√≥a {repo['full_name']} (Ki·ªÉm tra quy·ªÅn repo/admin:org)")
                else:
                    print(f"‚ùå L·ªói {e.response.status_code}: {e.response.text}")
            except Exception as e:
                print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)}")
        
        print(f"\nüéâ Ho√†n th√†nh! ƒê√£ x√≥a {success_count}/{len(delete_list)} repositories.")
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå L·ªói k·∫øt n·ªëi: {str(e)}")

if __name__ == "__main__":
    delete_github_repos()